import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Step 1: Load Data
data = pd.read_csv('password_dataset.csv')

# Step 2: Feature Engineering
def extract_features(password):
    length = len(password)
    lower = sum(c.islower() for c in password)
    upper = sum(c.isupper() for c in password)
    digits = sum(c.isdigit() for c in password)
    special = sum(not c.isalnum() for c in password)
    entropy = len(set(password)) / length if length > 0 else 0
    return pd.Series([length, lower, upper, digits, special, entropy])

data[['length', 'lower', 'upper', 'digits', 'special', 'entropy']] = data['password'].apply(extract_features)

# Step 3: Prepare Labels
# Assuming labels are provided; otherwise, use heuristics to generate them.
labels = data['strength']

# Step 4: Split Data
X = data[['length', 'lower', 'upper', 'digits', 'special', 'entropy']]
y = labels
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)

# Step 5: Train Model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Step 6: Evaluate Model
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

# Step 7: Deploy (Streamlit Example)
import streamlit as st

st.title('Password Strength Classifier')
password = st.text_input('Enter your password:')
if st.button('Check Strength'):
    features = extract_features(password).values.reshape(1, -1)
    prediction = clf.predict(features)[0]
    st.write(f'Password Strength: {prediction}')
